import cv2
import numpy

def downgrade(picture, show_frame=False, debug=False, solinoid_num=40):
    originalImage = picture
    width, height, m = originalImage.shape

    lowresImage = cv2.resize(originalImage,(solinoid_num, int((solinoid_num/height)*width)))

    grayImage = cv2.cvtColor(lowresImage, cv2.COLOR_BGR2GRAY)

    (thresh, blackAndWhiteImage) = cv2.threshold(grayImage, 127, 255, cv2.THRESH_BINARY)
    if show_frame:
        cv2.imshow('Black white image', blackAndWhiteImage)

    blackAndWhiteImage[blackAndWhiteImage == 255] = 1
    if debug:
        print(blackAndWhiteImage)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
    return blackAndWhiteImage

def pictonumpy(picture: str, show_frame=False, debug=False, solinoid_num=40):
    originalImage = cv2.imread(picture)
    width, height, m = originalImage.shape

    lowresImage = cv2.resize(originalImage,(solinoid_num, int((solinoid_num/height)*width)))

    grayImage = cv2.cvtColor(lowresImage, cv2.COLOR_BGR2GRAY)

    (thresh, blackAndWhiteImage) = cv2.threshold(grayImage, 127, 255, cv2.THRESH_BINARY)
    if show_frame:
        cv2.imshow('Black white image', blackAndWhiteImage)

    blackAndWhiteImage[blackAndWhiteImage == 255] = 1
    if debug:
        print(blackAndWhiteImage)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
    return blackAndWhiteImage

def invert(pic:numpy.ndarray):
    w,h = pic.shape
    for i in range(w):
        for j in range(h):
            if pic[i][j] == 1: pic[i][j] = 0
            else: pic[i][j] = 1
    return pic

if __name__ == "__main__":
    pictonumpy('Picture/1.png', debug=True, show_frame=True)
